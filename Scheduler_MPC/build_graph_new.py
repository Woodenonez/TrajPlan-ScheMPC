import math

import numpy as np
import networkx as nx # type: ignore
import matplotlib.pyplot as plt # type: ignore
from matplotlib.patches import Polygon # type: ignore


boundary = [(-26, 2), (26, 2), (26, 93), (-26, 93)]
obstacle_list = [
    [(-26, 2), (-25, 2), (-25, 92), (-26, 92)],
    [(26, 2), (25, 2), (25, 92), (26, 92)],
    [(-26, 92), (26, 92), (26, 93), (-26, 93)],

    [(-25, 92), (-21, 92), (-21, 82), (-25, 82)],
    [(25, 92), (21, 92), (21, 82), (25, 82)],
    [(-6, 92), (6, 92), (6, 82), (-6, 82)],

    [(-25, 82), (-17, 82), (-17, 66), (-25, 66)],
    [(25, 82), (17, 82), (17, 66), (25, 66)],
    [(-11, 82), (11, 82), (11, 76), (-11, 76)],
    [(-6, 76), (6, 76), (6, 68), (-6, 68)],

    [(-20, 66), (-17, 66), (-17, 59), (-20, 59)],
    [(20, 66), (17, 66), (17, 59), (20, 59)],
    [(-11, 74), (-8, 74), (-8, 59), (-11, 59)],
    [(11, 74), (8, 74), (8, 59), (11, 59)],
    [(-6, 66), (-3, 66), (-3, 59), (-6, 59)],
    [(6, 66), (3, 66), (3, 59), (6, 59)],

    [(-25, 57), (-17, 57), (-17, 48), (-25, 48)],
    [(25, 57), (17, 57), (17, 48), (25, 48)],
    [(-11, 57), (-8, 57), (-8, 41), (-11, 41)],
    [(11, 57), (8, 57), (8, 41), (11, 41)],
    [(-6, 59), (6, 59), (6, 50), (-6, 50)],

    [(-20, 48), (-17, 48), (-17, 41), (-20, 41)],
    [(20, 48), (17, 48), (17, 41), (20, 41)],
    [(-6, 48), (-3, 48), (-3, 41), (-6, 41)],
    [(6, 48), (3, 48), (3, 41), (6, 41)],

    [(-25, 39), (-17, 39), (-17, 30), (-25, 30)],
    [(25, 39), (17, 39), (17, 30), (25, 30)],
    [(-11, 39), (-8, 39), (-8, 23), (-11, 23)],
    [(11, 39), (8, 39), (8, 23), (11, 23)],
    [(-6, 41), (6, 41), (6, 32), (-6, 32)],

    [(-20, 30), (-17, 30), (-17, 23), (-20, 23)],
    [(20, 30), (17, 30), (17, 23), (20, 23)],
    [(-6, 30), (-3, 30), (-3, 23), (-6, 23)],
    [(6, 30), (3, 30), (3, 23), (6, 23)],

    [(-25, 21), (-17, 21), (-17, 12), (-25, 12)],
    [(25, 21), (17, 21), (17, 12), (25, 12)],
    [(-11, 21), (-8, 21), (-8, 5), (-11, 5)],
    [(11, 21), (8, 21), (8, 5), (11, 5)],
    [(-6, 23), (6, 23), (6, 14), (-6, 14)],

    [(-20, 12), (-17, 12), (-17, 5), (-20, 5)],
    [(20, 12), (17, 12), (17, 5), (20, 5)],
    [(-6, 12), (-3, 12), (-3, 3), (-6, 3)],
    [(6, 12), (3, 12), (3, 3), (6, 3)],
    [(-25, 3), (25, 3), (25, 2), (-25, 2)]
]


nodes = {
    'D01': [-20, 90], 'D02': [-17, 90], 'D03': [-14, 90], 'D04': [-11, 90], 'D05': [-8, 90],
    'D11': [-20, 83], 'D12': [-17, 83], 'D13': [-14, 83], 'D14': [-11, 83], 'D15': [-8, 83],
    'D21': [  8, 90], 'D22': [ 11, 90], 'D23': [ 14, 90], 'D24': [ 17, 90], 'D25': [20, 90],
    'D31': [  8, 83], 'D32': [ 11, 83], 'D33': [ 14, 83], 'D34': [ 17, 83], 'D35': [20, 83],

    'N0' : [-12, 75], 'N00' : [-16, 75], 'N1' : [-7, 75], 'N2' : [7, 75], 'N3' : [12, 75], 'N30' : [16, 75], 'N4' : [-7, 67], 'N5' : [7, 67], 
    'N6' : [-12, 58], 'N60' : [-16, 58], 'N7' : [-7, 58], 'N8' : [7, 58], 'N9' : [12, 58], 'N90' : [16, 58], 'N10': [-7, 49], 'N11': [7, 49],
    'N12': [-12, 40], 'N120': [-16, 40], 'N13': [-7, 40], 'N14': [7, 40], 'N15': [12, 40], 'N150': [16, 40], 'N16': [-7, 31], 'N17': [7, 31],
    'N18': [-12, 22], 'N180': [-16, 22], 'N19': [-7, 22], 'N20': [7, 22], 'N21': [12, 22], 'N210': [16, 22], 'N22': [-7, 13], 'N23': [7, 13],
    'N24': [-12,  4], 'N240': [-16,  4], 'N25': [-7,  4], 'N26': [7,  4], 'N27': [12,  4], 'N270': [16,  4], 

    'L1': [-2, 67], 'L12': [2, 67], 'L13': [-2, 60], 'L14': [2, 60],
    'L2': [-2, 49], 'L22': [2, 49], 'L23': [-2, 42], 'L24': [2, 42],
    'L3': [-2, 31], 'L32': [2, 31], 'L33': [-2, 24], 'L34': [2, 24], 
    'L4': [-2, 13], 'L42': [2, 13], 'L43': [-2,  6], 'L44': [2, 6],

    'P1': [-21, 58], 'P12': [-24, 58], 'P13': [-21, 65], 'P14': [-24, 65],
    'P2': [-21, 40], 'P22': [-24, 40], 'P23': [-21, 47], 'P24': [-24, 47],
    'P3': [-21, 22], 'P32': [-24, 22], 'P33': [-21, 29], 'P34': [-24, 29],
    'P4': [-21,  4], 'P42': [-24,  4], 'P43': [-21, 11], 'P44': [-24, 11],
    'P5': [ 21, 58], 'P52': [ 24, 58], 'P53': [ 21, 65], 'P54': [ 24, 65],  
    'P6': [ 21, 40], 'P62': [ 24, 40], 'P63': [ 21, 47], 'P64': [ 24, 47],   
    'P7': [ 21, 22], 'P72': [ 24, 22], 'P73': [ 21, 29], 'P74': [ 24, 29], 
    'P8': [ 21,  4], 'P82': [ 24,  4], 'P83': [ 21, 11], 'P84': [ 24, 11]
}

edges = [
    ['D01','D02'],['D02','D03'],['D03','D04'],['D04','D05'],
    ['D11','D12'],['D12','D13'],['D13','D14'],['D14','D15'],
    ['D01','D11'],['D02','D12'],['D03','D13'],['D04','D14'],['D05','D15'],
    ['D13', 'N0'],['D13', 'N00'],['N0','N00'],
    ['N0', 'N6'],['N00', 'N60'], ['N6', 'N12'],['N60', 'N120'], ['N12', 'N18'],['N120', 'N180'], ['N18', 'N24'],['N180', 'N240'],
    ['N1', 'N4'], ['N4', 'N7'], ['N7', 'N10'], ['N10', 'N13'], ['N13', 'N16'], ['N16', 'N19'], ['N19', 'N22'], ['N22', 'N25'], ['N2', 'N5'], ['N5', 'N8'], ['N8', 'N11'], ['N11', 'N14'], ['N14', 'N17'], ['N17', 'N20'], ['N20', 'N23'], ['N23', 'N26'],
    ['D21','D22'],['D22','D23'],['D23','D24'],['D24','D25'],
    ['D31','D32'],['D32','D33'],['D33','D34'],['D34','D35'],
    ['D21','D31'],['D22','D32'],['D23','D33'],
    ['D33', 'N3'],['D33', 'N30'],['N3','N30'],
    ['N3', 'N9'],['N30', 'N90'], ['N9', 'N15'],['N90', 'N150'], ['N15', 'N21'],['N150', 'N210'], ['N21', 'N27'],['N210', 'N270'],
    ['N0', 'N1'], ['N2', 'N3'], ['N60', 'N6'], ['N6', 'N7'], ['N8', 'N9'], ['N9', 'N90'], ['N120', 'N12'], ['N12', 'N13'], ['N14', 'N15'], ['N15', 'N150'], ['N180', 'N18'], ['N18', 'N19'], ['N20', 'N21'], ['N21', 'N210'], ['N240', 'N24'], ['N24', 'N25'], ['N26', 'N27'], ['N27', 'N270'],
    ['N4', 'L1'], ['L12', 'N5'],
    ['N10', 'L2'], ['L22', 'N11'],
    ['N16', 'L3'], ['L32', 'N17'],
    ['N22', 'L4'], ['L42', 'N23'],
    ['L1','L12'],['L1','L13'],['L12','L14'],['L13','L14'],
    ['L2','L22'],['L2','L23'],['L22','L24'],['L23','L24'],
    ['L3','L32'],['L3','L33'],['L32','L34'],['L33','L34'],
    ['L4','L42'],['L4','L43'],['L42','L44'],['L43','L44'],
    ['P1','N60'],['P1','P12'],['P12','P14'],['P14','P13'],['P13','P1'],
    ['P2','N120'],['P2','P22'],['P22','P24'],['P24','P23'],['P23','P2'],
    ['P3','N180'],['P3','P32'],['P32','P34'],['P34','P33'],['P33','P3'],
    ['P4','N240'],['P4','P42'],['P42','P44'],['P44','P43'],['P43','P4'],
    ['N90','P5'],['P5','P52'],['P52','P54'],['P54','P53'],['P53','P5'],
    ['N150','P6'],['P6','P62'],['P62','P64'],['P64','P63'],['P63','P6'],
    ['N210','P7'],['P7','P72'],['P72','P74'],['P74','P73'],['P73','P7'],
    ['N270','P8'],['P8','P82'],['P82','P84'],['P84','P83'],['P83','P8'],
]

min_x = min([i[0] for i in nodes.values()])
max_x = max([i[0] for i in nodes.values()])
min_y = min([i[1] for i in nodes.values()])
max_y = max([i[1] for i in nodes.values()])
print(f'min_x:{min_x}, max_x:{max_x}, min_y:{min_y}, max_y:{max_y}')

nodes_dict = {
    i:{
        'pos':nodes[i],
        'next':[j[1] for j in edges if j[0] == i]}
    for i in nodes
}

G = nx.Graph()
for i in nodes_dict:
    G.add_node(i)
for e in edges:
    G.add_edge(e[0], e[1])
nx.set_node_attributes(G, nodes_dict)

fig, ax = plt.subplots()

ax.plot(np.array(boundary+[boundary[0]])[:,0], np.array(boundary+[boundary[0]])[:,1], 'r-')
for obs in obstacle_list:
    ax.add_patch(Polygon(obs, closed=True, fill=True, color='gray'))

nx.draw(G, nx.get_node_attributes(G,'pos'), ax=ax, with_labels=True)
for tx, pos in nodes.items():
    ax.text(pos[0], pos[1]-2, f'{pos}')
ax.set_aspect('equal')
ax.grid(True, which='both')
ax.set_axis_on()

plt.show()
